{
  "version": 3,
  "sources": ["../src/custom-element.js"],
  "sourcesContent": ["const XML_DECLARATION = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\n,     XSL_NS_URL      = 'http://www.w3.org/1999/XSL/Transform';\n\n// const log = x => console.debug( new XMLSerializer().serializeToString( x ) );\n\nconst attr = (el, attr)=> el.getAttribute(attr)\n,   create = ( tag, t = '' ) => ( e => ((e.innerText = t||''),e) )(document.createElement( tag ));\n\n    function\nxml2dom( xmlString )\n{\n    return new DOMParser().parseFromString( XML_DECLARATION + xmlString, \"application/xml\" )\n}\n\n    function\nbodyXml( dce )\n{\n    const t = dce.firstElementChild\n    , sanitize = s => s.replaceAll(\"<html:\",\"<\")\n                       .replaceAll(\"</html:\",\"</\")\n                       .replaceAll( />\\s*<\\/xsl:value-of>/g ,\"/>\")\n                       .replaceAll( />\\s*<\\/(br|hr|img|area|base|col|embed|input|link|meta|param|source|track|wbr)>/g ,\"/>\");\n    if( t?.tagName === 'TEMPLATE')\n        return sanitize( new XMLSerializer().serializeToString( t.content ) );\n\n    const s = new XMLSerializer().serializeToString( dce );\n    return sanitize( s.substring( s.indexOf( '>' ) + 1, s.lastIndexOf( '<' ) ) );\n}\n\n    function\nslot2xsl( s )\n{\n    const v = document.createElementNS( XSL_NS_URL, 'value-of' );\n    v.setAttribute( 'select', `//*[@slot=\"${ s.name }\"]` );\n    s.parentNode.replaceChild( v, s );\n}\n\n    function\ninjectData( root, sectionName, arr, cb )\n{\n    const inject = ( tag, parent, s ) =>\n    {\n        parent.append( s = create( tag ) );\n        return s;\n    };\n    const l = inject( sectionName, root );\n    [ ...arr ].forEach( e => l.append( cb( e ) ) );\n    return l;\n}\n\n    function\nassureSlot( e )\n{\n    if( !e.slot )\n    {\n        if( !e.setAttribute )\n            e = create( 'span', e.textContent.replaceAll( '\\n', '' ) );\n        e.setAttribute( 'slot', '' )\n    }\n    return e;\n}\n\n    export function\nJson2Xml( o, tag )\n{\n    if( typeof o === 'string' )\n        return o;\n\n    const noTag = \"string\" != typeof tag;\n\n    if( o instanceof Array )\n    {   noTag &&  (tag = 'array');\n        return \"<\"+tag+\">\"+o.map(function(el){ return Json2Xml(el,tag); }).join()+\"</\"+tag+\">\";\n    }\n    noTag &&  (tag = 'r');\n    tag=tag.replace( /[^a-z0-9\\-]/gi,'_' );\n    var oo  = {}\n        ,   ret = [ \"<\"+tag+\" \"];\n    for( let k in o )\n        if( typeof o[k] == \"object\" )\n            oo[k] = o[k];\n        else\n            ret.push( k.replace( /[^a-z0-9\\-]/gi,'_' ) + '=\"'+o[k].toString().replace(/&/gi,'&#38;')+'\"');\n    if( oo )\n    {   ret.push(\">\");\n        for( let k in oo )\n            ret.push( Json2Xml( oo[k], k ) );\n        ret.push(\"</\"+tag+\">\");\n    }else\n        ret.push(\"/>\");\n    return ret.join('\\n');\n}\n\n    function\ninjectSlice( x, s, data )\n{\n    const     el = create(s)\n    ,   isString = typeof data === 'string' ;\n    el.innerHTML = isString? data : Json2Xml( data, s );\n    const  slice = isString? el : el.firstChild;\n    [...x.children].filter( e=>e.localName === s ).map( el=>el.remove() );\n        x.append(slice);\n}\n\n    export class\nCustomElement extends HTMLElement\n{\n    constructor()\n    {\n        super();\n\n        [ ...this.templateNode.querySelectorAll('slot') ].forEach( slot2xsl );\n        const p = new XSLTProcessor();\n        p.importStylesheet( this.xslt );\n        const tag = attr( this, 'tag' );\n        const dce = this;\n        const sliceNames = [...this.templateNode.querySelectorAll('[slice]')].map(e=>attr(e,'slice'));\n        tag && window.customElements.define( tag, class extends HTMLElement\n        {\n            constructor()\n            {\n                super();\n                const x = create( 'div' );\n                injectData( x, 'payload', this.childNodes, assureSlot );\n                injectData( x, 'attributes', this.attributes, e => create( e.nodeName, e.value ) );\n                injectData( x, 'dataset', Object.keys( this.dataset ), k => create( k, this.dataset[ k ] ) );\n                const sliceRoot = injectData( x, 'slice', sliceNames, k => create( k, '' ) );\n                this.xml = x;\n                const slices = {};\n\n\n                const sliceEvents=[];\n                const applySlices = ()=>\n                {   const processed = {}\n\n                    for(let ev; ev =  sliceEvents.pop(); )\n                    {   const s = attr( ev.target, 'slice');\n                        if( processed[s] )\n                            continue;\n                        injectSlice( sliceRoot, s, ev.detail );\n                        processed[s] = ev;\n                    }\n                    Object.keys(processed).length !== 0 && transform();\n                }\n                let timeoutID;\n\n                this.onSlice = ev=>\n                {   ev.stopPropagation?.();\n                    sliceEvents.push(ev);\n                    if( !timeoutID )\n                        timeoutID = setTimeout(()=>\n                        {   applySlices();\n                            timeoutID =0;\n                        },10);\n                };\n                const transform = ()=>\n                {\n                    const f = p.transformToFragment( x, document );\n                    this.innerHTML = '';\n                    [ ...f.childNodes ].forEach( e => this.appendChild( e ) );\n\n                    for( let el of this.querySelectorAll('[slice]') )\n                        if( 'function' === typeof el.sliceInit )\n                        {   const s = attr(el,'slice');\n                            slices[s] = el.sliceInit( slices[s] );\n                        }\n                };\n                transform();\n                applySlices();\n            }\n            get dce(){ return dce;}\n        } );\n    }\n    get templateNode(){ return this.firstElementChild?.tagName === 'TEMPLATE'? this.firstElementChild.content : this }\n    get dce(){ return this;}\n    get xsltString()\n    {\n        return (\n`<xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"${ XSL_NS_URL }\">\n  <xsl:output method=\"html\" />\n\n  <xsl:template match=\"/\">\n    <xsl:apply-templates select=\"//attributes\"/>\n  </xsl:template>\n  <xsl:template match=\"attributes\">\n    ${ bodyXml( this ) }\n  </xsl:template>\n\n</xsl:stylesheet>` );\n    }\n    get xslt(){ return xml2dom( this.xsltString ); }\n}\n\nwindow.customElements.define( 'custom-element', CustomElement );\nexport default CustomElement;\n"],
  "mappings": "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",
  "names": ["XML_DECLARATION", "XSL_NS_URL", "attr", "el", "create", "tag", "t", "e", "xml2dom", "xmlString", "bodyXml", "dce", "sanitize", "s", "slot2xsl", "v", "injectData", "root", "sectionName", "arr", "cb", "l", "parent", "assureSlot", "o", "noTag", "oo", "ret", "k", "injectSlice", "x", "data", "isString", "slice", "p", "sliceNames", "sliceRoot", "slices", "sliceEvents", "applySlices", "processed", "ev", "transform", "timeoutID", "f"]
}
