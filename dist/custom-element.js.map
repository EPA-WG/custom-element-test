{
  "version": 3,
  "sources": ["../src/custom-element.js"],
  "sourcesContent": ["const XML_DECLARATION = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\n    , XSL_NS_URL      = 'http://www.w3.org/1999/XSL/Transform';\n\n// const log = x => console.debug( new XMLSerializer().serializeToString( x ) );\n\nconst create = ( tag, t = '' ) =>\n{\n    const e = document.createElement( tag );\n    if( t ) e.innerText = t;\n    return e;\n}\n\nfunction xml2dom( xmlString )\n{\n    return new DOMParser().parseFromString( XML_DECLARATION + xmlString, \"application/xml\" )\n}\n\nfunction bodyXml( dce )\n{\n    const s = new XMLSerializer().serializeToString( dce );\n    return s.substring( s.indexOf( '>' ) + 1, s.lastIndexOf( '<' ) );\n}\n\nfunction slot2xsl( s )\n{\n    const v = document.createElementNS( XSL_NS_URL, 'value-of' );\n    v.setAttribute( 'select', `//*[@slot=\"${ s.name }\"]` );\n    s.parentNode.replaceChild( v, s );\n}\n\nfunction injectData( root, sectionName, arr, cb )\n{\n    const inject = ( tag, parent, s ) =>\n    {\n        parent.append( s = create( tag ) );\n        return s;\n    };\n    const l = inject( sectionName, root );\n    [ ...arr ].forEach( e => l.append( cb( e ) ) );\n}\n\nfunction assureSlot( e )\n{\n    if( !e.slot )\n    {\n        if( !e.setAttribute )\n            e = create( 'span', e.textContent.replaceAll( '\\n', '' ) );\n        e.setAttribute( 'slot', '' )\n    }\n    return e;\n}\n\nexport class CustomElement extends HTMLElement\n{\n    constructor()\n    {\n        super();\n\n        [ ...this.getElementsByTagName( 'slot' ) ].forEach( slot2xsl );\n        const p = new XSLTProcessor();\n        p.importStylesheet( this.xslt );\n        const tag = this.getAttribute( 'tag' );\n        const dce = this;\n        tag && window.customElements.define( tag, class extends HTMLElement\n        {\n            constructor()\n            {\n                super();\n                const x = create( 'div' );\n                injectData( x, 'payload', this.childNodes, assureSlot );\n                injectData( x, 'attributes', this.attributes, e => create( e.nodeName, e.value ) );\n                injectData( x, 'dataset', Object.keys( this.dataset ), k => create( k, this.dataset[ k ] ) );\n                this.xml = x;\n                const f = p.transformToFragment( x, document );\n                this.innerHTML = '';\n                [ ...f.childNodes ].forEach( e => this.appendChild( e ) );\n            }\n            get dce(){ return dce;}\n        } );\n    }\n    get dce(){ return this;}\n    get xslt()\n    {\n        return xml2dom(\n`<xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"${ XSL_NS_URL }\">\n  <xsl:output method=\"html\" />\n\n  <xsl:template match=\"/\">\n    <xsl:apply-templates select=\"//attributes\"/>\n  </xsl:template>\n  <xsl:template match=\"attributes\">\n    ${ bodyXml( this ) }\n  </xsl:template>\n\n</xsl:stylesheet>` );\n    }\n}\n\nwindow.customElements.define( 'custom-element', CustomElement );\nexport default CustomElement;"],
  "mappings": "AAAA,MAAMA,EAAkB,yCAClBC,EAAkB,uCAIlBC,EAAS,CAAEC,EAAKC,EAAI,KAC1B,CACI,MAAMC,EAAI,SAAS,cAAeF,CAAI,EACtC,OAAIC,IAAIC,EAAE,UAAYD,GACfC,CACX,EAEA,SAASC,EAASC,EAClB,CACI,OAAO,IAAI,UAAU,EAAE,gBAAiBP,EAAkBO,EAAW,iBAAkB,CAC3F,CAEA,SAASC,EAASC,EAClB,CACI,MAAMC,EAAI,IAAI,cAAc,EAAE,kBAAmBD,CAAI,EACrD,OAAOC,EAAE,UAAWA,EAAE,QAAS,GAAI,EAAI,EAAGA,EAAE,YAAa,GAAI,CAAE,CACnE,CAEA,SAASC,EAAUD,EACnB,CACI,MAAME,EAAI,SAAS,gBAAiBX,EAAY,UAAW,EAC3DW,EAAE,aAAc,SAAU,cAAeF,EAAE,QAAU,EACrDA,EAAE,WAAW,aAAcE,EAAGF,CAAE,CACpC,CAEA,SAASG,EAAYC,EAAMC,EAAaC,EAAKC,EAC7C,CAMI,MAAMC,GALS,CAAEf,EAAKgB,EAAQT,KAE1BS,EAAO,OAAQT,EAAIR,EAAQC,CAAI,CAAE,EAC1BO,IAEOK,EAAaD,CAAK,EACpC,CAAE,GAAGE,CAAI,EAAE,QAASX,GAAKa,EAAE,OAAQD,EAAIZ,CAAE,CAAE,CAAE,CACjD,CAEA,SAASe,EAAYf,EACrB,CACI,OAAKA,EAAE,OAEEA,EAAE,eACHA,EAAIH,EAAQ,OAAQG,EAAE,YAAY,WAAY;AAAA,EAAM,EAAG,CAAE,GAC7DA,EAAE,aAAc,OAAQ,EAAG,GAExBA,CACX,CAEO,aAAM,sBAAsB,WACnC,CACI,aACA,CACI,MAAM,EAEN,CAAE,GAAG,KAAK,qBAAsB,MAAO,CAAE,EAAE,QAASM,CAAS,EAC7D,MAAMU,EAAI,IAAI,cACdA,EAAE,iBAAkB,KAAK,IAAK,EAC9B,MAAMlB,EAAM,KAAK,aAAc,KAAM,EAC/BM,EAAM,KACZN,GAAO,OAAO,eAAe,OAAQA,EAAK,cAAc,WACxD,CACI,aACA,CACI,MAAM,EACN,MAAMmB,EAAIpB,EAAQ,KAAM,EACxBW,EAAYS,EAAG,UAAW,KAAK,WAAYF,CAAW,EACtDP,EAAYS,EAAG,aAAc,KAAK,WAAYjB,GAAKH,EAAQG,EAAE,SAAUA,EAAE,KAAM,CAAE,EACjFQ,EAAYS,EAAG,UAAW,OAAO,KAAM,KAAK,OAAQ,EAAGC,GAAKrB,EAAQqB,EAAG,KAAK,QAASA,EAAI,CAAE,EAC3F,KAAK,IAAMD,EACX,MAAME,EAAIH,EAAE,oBAAqBC,EAAG,QAAS,EAC7C,KAAK,UAAY,GACjB,CAAE,GAAGE,EAAE,UAAW,EAAE,QAASnB,GAAK,KAAK,YAAaA,CAAE,CAAE,CAC5D,CACA,IAAI,KAAK,CAAE,OAAOI,CAAI,CAC1B,CAAE,CACN,CACA,IAAI,KAAK,CAAE,OAAO,IAAK,CACvB,IAAI,MACJ,CACI,OAAOH,EACf;AAAA,iBACkBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOXO,EAAS,IAAK;AAAA;AAAA;AAAA,kBAGF,CACf,CACJ,CAEA,OAAO,eAAe,OAAQ,iBAAkB,aAAc,EAC9D,eAAe",
  "names": ["XML_DECLARATION", "XSL_NS_URL", "create", "tag", "t", "e", "xml2dom", "xmlString", "bodyXml", "dce", "s", "slot2xsl", "v", "injectData", "root", "sectionName", "arr", "cb", "l", "parent", "assureSlot", "p", "x", "k", "f"]
}
