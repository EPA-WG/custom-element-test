{
  "version": 3,
  "sources": ["../src/custom-element.js"],
  "sourcesContent": ["const XSL_NS_URL  = 'http://www.w3.org/1999/XSL/Transform'\n,     HTML_NS_URL = 'http://www.w3.org/1999/xhtml'\n,     EXSL_NS_URL = 'http://exslt.org/common'\n,     DCE_NS_URL  =\"urn:schemas-epa-wg:dce\";\n\n// const log = x => console.debug( new XMLSerializer().serializeToString( x ) );\n\nconst attr = (el, attr)=> el.getAttribute?.(attr)\n,   isText = e => e.nodeType === 3\n,   create = ( tag, t = '' ) => ( e => ((e.innerText = t||''),e) )(document.createElement( tag ))\n,   createText = ( d, t) => (d.ownerDocument || d ).createTextNode( t )\n,   createNS = ( ns, tag, t = '' ) => ( e => ((e.innerText = t||''),e) )(document.createElementNS( ns, tag ))\n,   xslNs = x => ( x?.setAttribute('xmlns:xsl', XSL_NS_URL ), x )\n,   xslHtmlNs = x => ( x?.setAttribute('xmlns:xhtml', HTML_NS_URL ), xslNs(x) );\n\n    function\nASSERT(x)\n{\n    // if(!x)\n    //     debugger\n}\n    function\nxml2dom( xmlString )\n{\n    return new DOMParser().parseFromString( xmlString, \"application/xml\" )\n}\n    function\nxmlString(doc){ return new XMLSerializer().serializeToString( doc ) }\n\n    function\ninjectData( root, sectionName, arr, cb )\n{   const create = ( tag ) => root.ownerDocument.createElement( tag );\n    const inject = ( tag, parent, s ) =>\n    {   parent.append( s = create( tag ) );\n        return s;\n    };\n    const l = inject( sectionName, root );\n    [ ...arr ].forEach( e => l.append( cb( e ) ) );\n    return l;\n}\n\n    function\nassureSlot( e )\n{\n    if( !e.slot )\n    {\n        if( !e.setAttribute )\n            e = create( 'span', e.textContent.replaceAll( '\\n', '' ) );\n        e.setAttribute( 'slot', '' )\n    }\n    return e;\n}\n\n    export function\nJson2Xml( o, tag )\n{\n    if( typeof o === 'string' )\n        return o;\n\n    const noTag = \"string\" != typeof tag;\n\n    if( o instanceof Array )\n    {   noTag &&  (tag = 'array');\n        return \"<\"+tag+\">\"+o.map(function(el){ return Json2Xml(el,tag); }).join()+\"</\"+tag+\">\";\n    }\n    noTag &&  (tag = 'r');\n    tag=tag.replace( /[^a-z0-9\\-]/gi,'_' );\n    var oo  = {}\n        ,   ret = [ \"<\"+tag+\" \"];\n    for( let k in o )\n        if( typeof o[k] == \"object\" )\n            oo[k] = o[k];\n        else\n            ret.push( k.replace( /[^a-z0-9\\-]/gi,'_' ) + '=\"'+o[k].toString().replace(/&/gi,'&#38;')+'\"');\n    if( oo )\n    {   ret.push(\">\");\n        for( let k in oo )\n            ret.push( Json2Xml( oo[k], k ) );\n        ret.push(\"</\"+tag+\">\");\n    }else\n        ret.push(\"/>\");\n    return ret.join('\\n');\n}\n    export function\ntagUid( node )\n{   // {} to xsl:value-of\n    forEach$(node,'*',d => [...d.childNodes].filter( e=>e.nodeType === 3 ).forEach( e=>\n    {   if( e.parentNode.localName === 'style' )\n            return;\n        const m = e.data.matchAll( /{([^}]*)}/g );\n        if(m)\n        {   let l = 0\n            , txt = t => createText(e,t||'')\n            ,  tt = [];\n            [...m].forEach(t=>\n            {   if( t.index > l )\n                    tt.push( txt( t.input.substring( l, t.index ) ))\n                const v = e.ownerDocument.createElement('xsl:value-of');\n                v.setAttribute('select', t[1] );\n                tt.push(v);\n                l = t.index+t[0].length;\n            })\n            if( l < e.data.length)\n                tt.push( txt( e.data.substring(l,e.data.length) ));\n            if( tt.length )\n            {   for( let t of tt )\n                    d.insertBefore(t,e);\n                d.removeChild(e);\n            }\n        }\n    }));\n\n    if( 'all' in node ) {\n        let i= 1;\n        for( let e of node.all )\n            e.setAttribute && !e.tagName.startsWith('xsl:') && e.setAttribute('data-dce-id', '' + i++)\n    }\n    return node\n}\n    export function\ncreateXsltFromDom( templateNode, S = 'xsl:stylesheet' )\n{\n    if( templateNode.tagName === S || templateNode.documentElement?.tagName === S )\n        return tagUid(templateNode)\n    const sanitizeXsl = xml2dom(`<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"${ XSL_NS_URL }\" xmlns:xhtml=\"${ HTML_NS_URL }\" xmlns:exsl=\"${EXSL_NS_URL}\" exclude-result-prefixes=\"exsl\" >   \n        <xsl:output method=\"xml\" />\n        <xsl:template match=\"/\"><dce-root><xsl:apply-templates select=\"*\"/></dce-root></xsl:template>\n        <xsl:template match=\"*[name()='template']\"><xsl:apply-templates mode=\"sanitize\" select=\"*|text()\"/></xsl:template>\n        <xsl:template match=\"*\"><xsl:apply-templates mode=\"sanitize\" select=\"*|text()\"/></xsl:template>\n        <xsl:template match=\"*[name()='svg']|*[name()='math']\"><xsl:apply-templates mode=\"sanitize\" select=\".\"/></xsl:template>\n        <xsl:template mode=\"sanitize\" match=\"*[count(text())=1 and count(*)=0]\"><xsl:copy><xsl:apply-templates mode=\"sanitize\" select=\"@*\"/><xsl:value-of select=\"text()\"/></xsl:copy></xsl:template>\n        <xsl:template mode=\"sanitize\" match=\"xhtml:*[count(text())=1 and count(*)=0]\"><xsl:element name=\"{local-name()}\"><xsl:apply-templates mode=\"sanitize\" select=\"@*\"/><xsl:value-of select=\"text()\"/></xsl:element></xsl:template>\n        <xsl:template mode=\"sanitize\" match=\"*|@*\"><xsl:copy><xsl:apply-templates mode=\"sanitize\" select=\"*|@*|text()\"/></xsl:copy></xsl:template>\n        <xsl:template mode=\"sanitize\" match=\"text()[normalize-space(.) = '']\"/>\n        <xsl:template mode=\"sanitize\" match=\"text()\"><dce-text><xsl:copy/></dce-text></xsl:template>\n        <xsl:template mode=\"sanitize\" match=\"xsl:value-of|*[name()='slot']\"><dce-text><xsl:copy><xsl:apply-templates mode=\"sanitize\" select=\"*|@*|text()\"/></xsl:copy></dce-text></xsl:template>\n        <xsl:template mode=\"sanitize\" match=\"xhtml:*\"><xsl:element name=\"{local-name()}\"><xsl:apply-templates mode=\"sanitize\" select=\"*|@*|text()\"/></xsl:element></xsl:template>\n    </xsl:stylesheet>`)\n    const sanitizeProcessor = new XSLTProcessor()\n    ,   tc = (n =>\n        {\n            forEach$(n,'script', s=> s.remove() );\n            const e = n.firstElementChild?.content || n.content\n            , asXmlNode = r => xslHtmlNs(xml2dom( '<xhtml/>' ).importNode(r, true));\n            if( e )\n            {   const t = create('div');\n                [ ...e.childNodes ].map( c => t.append(c.cloneNode(true)) )\n                return asXmlNode(t)\n            }\n            return  asXmlNode(n.documentElement || n.body || n)\n        })(templateNode)\n    ,   xslDom = xml2dom(\n        `<xsl:stylesheet version=\"1.0\"\n        xmlns:xsl=\"${ XSL_NS_URL }\"\n        xmlns:dce=\"urn:schemas-epa-wg:dce\"\n        xmlns:exsl=\"http://exslt.org/common\"\n        exclude-result-prefixes=\"exsl\"\n    >\n    <xsl:template mode=\"payload\"  match=\"attributes\"></xsl:template>\n    <xsl:template match=\"/\">\n        <xsl:apply-templates mode=\"payload\" select=\"/datadom/attributes\"/>\n    </xsl:template>\n    <xsl:template name=\"slot\" >\n        <xsl:param name=\"slotname\" />\n        <xsl:param name=\"defaultvalue\" />\n        <xsl:choose>\n            <xsl:when test=\"//payload/*[@slot=$slotname]\">\n               <xsl:copy-of select=\"//payload/*[@slot=$slotname]\"/>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:copy-of select=\"$defaultvalue\"/>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:template>\n    <xsl:variable name=\"js-injected-body\">\n        <xsl:call-template name=\"slot\" >\n            <xsl:with-param name=\"slotname\" select=\"''\"/>\n            <xsl:with-param name=\"defaultvalue\"/>\n        </xsl:call-template>\n    </xsl:variable>\n</xsl:stylesheet>`\n        );\n\n    sanitizeProcessor.importStylesheet( sanitizeXsl );\n\n    const fr = sanitizeProcessor.transformToFragment(tc, document)\n    ,   $ = (e,css) => e.querySelector(css)\n    ,   payload = $( xslDom, 'template[mode=\"payload\"]');\n    if( !fr )\n        return console.error(\"transformation error\",{ xml:tc.outerHTML, xsl: xmlString( sanitizeXsl ) });\n\n    for( const c of fr.childNodes )\n        payload.append(xslDom.importNode(c,true))\n\n    const embeddedTemplates = [...payload.querySelectorAll('template')];\n    embeddedTemplates.forEach(t=>payload.ownerDocument.documentElement.append(t));\n\n    const   slotCall = $(xslDom,'call-template[name=\"slot\"]')\n    ,       slot2xsl = s =>\n    {   const v = slotCall.cloneNode(true)\n        ,  name = attr(s,'name') || '';\n        name && v.firstElementChild.setAttribute('select',`'${ name }'`)\n        for( let c of s.childNodes)\n            v.lastElementChild.append(c)\n        return v\n    }\n\n    forEach$( payload,'slot', s => s.parentNode.replaceChild( slot2xsl(s), s ) )\n\n    return tagUid(xslDom)\n}\n    export async function\nxhrTemplate(src)\n{\n    const dom = await new Promise((resolve,reject)=>\n    {   const xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src);\n        xhr.responseType = \"document\";\n        // xhr.overrideMimeType(\"text/xml\");\n        xhr.onload = () =>\n        {   if( xhr.readyState === xhr.DONE && xhr.status === 200 )\n                resolve( xhr.responseXML ||  create('div', xhr.responseText ) )\n            reject(xhr.statusText)\n        };\n        xhr.addEventListener(\"error\", ev=>reject(ev) );\n\n        xhr.send();\n    })\n    return dom\n}\n    export function\ndeepEqual(a, b, O=false)\n{\n    if( a === b )\n        return true;\n\n    if( (typeof a !== \"object\" || a === null) || (typeof b !== \"object\" || b === null)\n        || Object.keys(a).length !== Object.keys(b).length )\n        return O;\n\n    for( let k in a )\n        if( !(k in b) || !deepEqual( a[k], b[k] ) )\n            return O\n    return true;\n}\n\n    export function\ninjectSlice( x, s, data )\n{\n    const isString = typeof data === 'string' ;\n    const createXmlNode = ( tag, t = '' ) => ( e => ((e.append( createText(x, t||''))),e) )(x.ownerDocument.createElement( tag ))\n    const el = isString\n        ? createXmlNode(s, data)\n        : document.adoptNode( xml2dom( Json2Xml( data, s ) ).documentElement);\n    [...x.children].filter( e=>e.localName === s ).map( el=>el.remove() );\n    el.data = data\n        x.append(el);\n}\n\nfunction forEach$( el, css, cb){\n    if( el.querySelectorAll )\n        [...el.querySelectorAll(css)].forEach(cb)\n}\nconst getByHashId = ( n, id )=> ( p => n===p? null: (p && ( p.querySelector(id) || getByHashId(p,id) ) ))( n.getRootNode() )\nconst loadTemplateRoots = async ( src, dce )=>\n{\n    if( !src || !src.trim() )\n        return [dce]\n    if( src.startsWith('#') )\n        return ( n =>\n        {   if(!n) return []\n            const a = n.querySelectorAll(src)\n            if( a.length )\n                return [...a]\n            const r = n.getRootNode();\n            return r===n ? []: getByHashId(r)\n        })(dce.parentElement)\n    try\n    {   // todo cache\n        const dom = await xhrTemplate(src)\n        const hash = new URL(src, location).hash\n        if( hash )\n        {   const ret = dom.querySelectorAll(hash);\n            if( ret.length )\n                return [...ret]\n            return [dce]\n        }\n        return [dom]\n    }catch (error){ return [dce]}\n}\nexport function mergeAttr( from, to )\n{   if( isText(from) )\n    {\n        if( !isText(to) ){ debugger }\n        return\n    }\n    for( let a of from.attributes)\n        a.namespaceURI? to.setAttributeNS( a.namespaceURI, a.name, a.value ) : to.setAttribute( a.name, a.value )\n}\nexport function assureUnique(n, id=0)\n{\n    const m = {}\n    for( const e of n.childNodes )\n    {\n        const a = attr(e,'data-dce-id') || e.dceId || 0;\n        if( !m[a] )\n        {   if( !a )\n            {   m[a] = e.dceId = ++id;\n                if( e.setAttribute )\n                    e.setAttribute('data-dce-id', e.dceId )\n            }else\n                m[a] = 1;\n        }else\n        {   const v = e.dceId = a + '-' + m[a]++;\n            if( e.setAttribute )\n                e.setAttribute('data-dce-id', v )\n        }\n        e.childNodes.length && assureUnique(e)\n    }\n}\nexport function merge( parent, fromArr )\n{\n    const id2old = {};\n    for( let c of parent.childNodes)\n    {   ASSERT( !id2old[c.dceId] );\n        if( isText(c) )\n        {   ASSERT( c.data.trim() );\n            id2old[c.dceId || 0] = c;\n        } else\n            id2old[attr(c, 'data-dce-id') || 0] = c;\n    }\n    for( let e of [...fromArr] )\n    {\n        const o = id2old[ attr(e, 'data-dce-id') || e.dceId ];\n        if( o )\n        {   if( isText(e) )\n            {   if( o.nodeValue !== e.nodeValue )\n                    o.nodeValue = e.nodeValue;\n            }else\n            {   mergeAttr(o,e)\n                if( o.childNodes.length || e.childNodes.length )\n                    merge(o, e.childNodes)\n            }\n        }else\n            parent.append( e )\n    }\n}\nexport function assureUID(n,attr)\n{   if( !n.hasAttribute(attr) )\n        n.setAttribute(attr, crypto.randomUUID());\n    return n.getAttribute(attr)\n}\n    export class\nCustomElement extends HTMLElement\n{\n    async connectedCallback()\n    {\n        const templateRoots = await loadTemplateRoots( attr( this, 'src' ), this )\n        ,               tag = attr( this, 'tag' )\n        ,           tagName = tag ? tag : 'dce-'+crypto.randomUUID();\n\n        for( const t of templateRoots )\n            forEach$(t.templateNode||t.content||t, 'style',s=>{\n                const slot = s.closest('slot');\n                const sName = slot ? `slot[name=\"${slot.name}\"]`:'';\n                s.innerHTML = `${tagName} ${sName}{${s.innerHTML}}`;\n                this.append(s);\n            })\n        const templateDocs = templateRoots.map( n => createXsltFromDom( n ) )\n        , xp = templateDocs.map( (td, p) =>{ p = new XSLTProcessor(); p.importStylesheet( td ); return p })\n\n        Object.defineProperty( this, \"xsltString\", { get: ()=>templateDocs.map( td => xmlString(td) ).join('\\n') });\n\n        const dce = this;\n        const sliceNames = [...this.templateNode.querySelectorAll('[slice]')].map(e=>attr(e,'slice'));\n        class DceElement extends HTMLElement\n        {\n            connectedCallback()\n            {   if( this.firstElementChild?.tagName === 'TEMPLATE' )\n                {   const t = this.firstElementChild;\n                    for( const n of [...t.content.childNodes] )\n                        if( n.localName === 'style' ){\n                            const id = assureUID(this,'data-dce-style')\n                            n.innerHTML= `${tagName}[data-dce-style=\"${id}\"]{${n.innerHTML}}`;\n                            t.insertAdjacentElement('beforebegin',n);\n                        }else\n                            if(n.nodeType===1)\n                                t.insertAdjacentElement('beforebegin',n);\n                            else if(n.nodeType===3)\n                                t.insertAdjacentText('beforebegin',n.data);\n\n                    t.remove();\n\n                }\n                const x = xml2dom( '<datadom/>' ).documentElement;\n                const createXmlNode = ( tag, t = '' ) => ( e =>\n                {   if( t )\n                        e.append( createText( x, t ))\n                    return e;\n                })(x.ownerDocument.createElement( tag ))\n                injectData( x, 'payload'    , this.childNodes, assureSlot );\n                this.innerHTML='';\n                injectData( x, 'attributes' , this.attributes, e => createXmlNode( e.nodeName, e.value ) );\n                injectData( x, 'dataset', Object.keys( this.dataset ), k => createXmlNode( k, this.dataset[ k ] ) );\n                const sliceRoot = injectData( x, 'slice', sliceNames, k => createXmlNode( k, '' ) );\n                this.xml = x;\n\n                const sliceEvents=[];\n                const applySlices = ()=>\n                {   const processed = {}\n\n                    for(let ev; ev =  sliceEvents.pop(); )\n                    {   const s = attr( ev.target, 'slice');\n                        if( processed[s] )\n                            continue;\n                        injectSlice( sliceRoot, s, 'object' === typeof ev.detail ? {...ev.detail}: ev.detail );\n                        processed[s] = ev;\n                    }\n                    Object.keys(processed).length !== 0 && transform();\n                }\n                let timeoutID;\n\n                this.onSlice = ev=>\n                {   ev.stopPropagation?.();\n                    const s = attr( ev.target, 'slice')\n                    if( deepEqual( ev.detail, [...sliceRoot.children].find( e=>e.localName === s )?.data ) )\n                        return\n\n                    sliceEvents.push(ev);\n                    if( !timeoutID )\n                        timeoutID = setTimeout(()=>\n                        {   applySlices();\n                            timeoutID =0;\n                        },10);\n                };\n                const transform = ()=>\n                {\n                    const ff = xp.map( (p,i) =>\n                    {   const f = p.transformToFragment(x, document)\n                        if( !f )\n                            console.error( \"XSLT transformation error. xsl:\\n\", xmlString(templateDocs[i]), '\\nxml:\\n', xmlString(x) );\n                        return f\n                    });\n                    ff.map( f =>\n                    {   if( !f )\n                            return;\n                        assureUnique(f);\n                        merge( this, f.childNodes )\n                    })\n                    const changeCb = el=>this.onSlice({ detail: el[attr(el,'slice-prop') || 'value'], target: el })\n                    , hasInitValue = el => el.hasAttribute('slice-prop') || el.hasAttribute('value') || el.value;\n\n                    forEach$( this,'[slice]', el =>\n                    {   if( !el.dceInitialized )\n                        {   el.dceInitialized = 1;\n                            el.addEventListener( attr(el,'slice-update')|| 'change', ()=>changeCb(el) )\n                            if( hasInitValue(el) )\n                                changeCb(el)\n                        }\n                    })\n                };\n                transform();\n                applySlices();\n            }\n            get dce(){ return dce }\n        }\n        if(tag)\n            window.customElements.define( tag, DceElement);\n        else\n        {   const t = tagName;\n            window.customElements.define( t, DceElement);\n            const el = document.createElement(t);\n            this.getAttributeNames().forEach(a=>el.setAttribute(a,this.getAttribute(a)));\n            el.append(...[...this.childNodes].filter(e=>e.localName!=='style'))\n            this.append(el);\n        }\n    }\n    get templateNode(){ return this.firstElementChild?.tagName === 'TEMPLATE'? this.firstElementChild.content : this }\n    get dce(){ return this }\n\n    get xslt(){ return xml2dom( this.xsltString ) }\n}\n\nwindow.customElements.define( 'custom-element', CustomElement );\nexport default CustomElement;\n"],
  "mappings": "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",
  "names": ["XSL_NS_URL", "HTML_NS_URL", "EXSL_NS_URL", "DCE_NS_URL", "attr", "el", "isText", "create", "tag", "t", "e", "createText", "d", "createNS", "ns", "xslNs", "x", "xslHtmlNs", "ASSERT", "xml2dom", "xmlString", "doc", "injectData", "root", "sectionName", "arr", "cb", "l", "parent", "s", "assureSlot", "o", "noTag", "oo", "ret", "k", "node", "forEach$", "m", "txt", "tt", "v", "i", "templateNode", "S", "sanitizeXsl", "sanitizeProcessor", "tc", "n", "asXmlNode", "r", "c", "xslDom", "fr", "$", "css", "payload", "slotCall", "slot2xsl", "name", "src", "resolve", "reject", "xhr", "ev", "a", "b", "O", "data", "getByHashId", "id", "p", "loadTemplateRoots", "dce", "dom", "hash", "from", "to", "fromArr", "id2old", "templateRoots", "tagName", "slot", "sName", "templateDocs", "xp", "td", "sliceNames", "DceElement", "createXmlNode", "sliceRoot", "sliceEvents", "applySlices", "processed", "transform", "timeoutID", "f", "changeCb", "hasInitValue"]
}
